# -*- python -*-
# ex: set syntax=python:

from buildbot.buildslave import BuildSlave
from buildbot.config import BuilderConfig
from buildbot.process import factory
from buildbot.scheduler import Nightly, Triggerable
from buildbot.status import html
from buildbot.steps import shell, source, transfer
from buildbot.steps.trigger import Trigger

import local_config as config



################################################################################
#
# General settings
#
################################################################################



c = BuildmasterConfig = {}

c['projectName'] = 'MWorks'
c['projectURL'] = config.project_url
c['buildbotURL'] = 'http://%s:%d/' % (config.buildbot_hostname,
                                      config.webstatus_port)

c['status'] = [html.WebStatus(http_port=config.webstatus_port, allowForce=True)]

installer_basename = 'MWorks'
installer_version = 'NIGHTLY'
installer_filename = installer_basename + '-' + installer_version + '.dmg'
installer_slavesrc = '/tmp/mw_installer/' + installer_filename
installer_masterdest = (config.installer_destination_path + '/' +
                        installer_filename)



################################################################################
#
# Build slaves
#
################################################################################



macosx_10_5_x86_64 = 'MacOSX-10.5-x86_64'
macosx_10_6_x86_64 = 'MacOSX-10.6-x86_64'

slave_names = [macosx_10_5_x86_64, macosx_10_6_x86_64]
default_slavename = macosx_10_6_x86_64

c['slaves'] = [BuildSlave(name, config.slave_pass) for name in slave_names]
c['slavePortnum'] = config.slave_port



################################################################################
#
# Build steps
#
################################################################################



def git_step(reponame, mode='update'):
    repourl = '%s/%s.git' % (config.repository_base_url, reponame)
    return source.Git(repourl=repourl, mode=mode)


def shell_step(*args, **kwargs):
    subdir = kwargs.pop('subdir', None)
    if subdir is not None:
        kwargs.setdefault('workdir', 'build/' + subdir)

    for key, val in (('description', 'building'), ('descriptionDone', 'build')):
        if subdir is not None:
            val = [val, subdir]
        kwargs.setdefault(key, val)

    return shell.ShellCommand(*args, **kwargs)


def xcodebuild_step(target = 'Everything',
                    configuration = 'Development (10.5 Compatible)',
                    **kwargs):

    return shell_step(
        command = [
            ('/Library/Application Support/MWorks/Developer/gcc40/bin/'
             'mw_xcodebuild'),
            target,
            configuration,
            ],
        **kwargs
        )


component_build_steps = (

    ('clean_all', [
            shell_step(
                command = [
                    'rm', '-Rf',
                    '/Applications/MWClient.app',
                    '/Applications/MWEditor.app',
                    '/Applications/MWServer.app',
                    '/Documents/MWorks',
                    '/Library/Application Support/MWorks',
                    '/Library/Frameworks/MWorksCocoa.framework',
                    '/Library/Frameworks/MWorksCore.framework',
                    ],
                description = 'cleaning',
                descriptionDone = 'clean',
                ),
            ]),

    ('install_xcode_configs', [
            git_step('mw_build'),
            shell_step(
                subdir = 'xcode_config',
                command = ['./install_xcconfigs.sh'],
                ),
            ]),

    ('build_mw_supporting', [
            git_step('mw_supporting'),
            shell_step(
                command = ['git', 'submodule', 'update', '--init'],
                description = ['updating', 'submodules'],
                descriptionDone = ['update', 'submodules'],
                ),
            shell_step(
                command = ['python', 'fresh_build.py', '--rebuild_all',
                           '--sdk=10.5'],
                ),
            ]),

    ('build_mw_scarab', [
            git_step('mw_scarab'),
            xcodebuild_step('libscarab.a'),
            ]),

    ('build_mw_core', [
            git_step('mw_core'),
            xcodebuild_step(),
            ]),

    ('build_mw_core_plugins', [
            git_step('mw_core_plugins'),
            xcodebuild_step(
                subdir = 'DriftingGratingStimulus',
                target = 'DriftingGratingStimulusPlugin',
                ),
            xcodebuild_step(
                subdir = 'HIDPlugin',
                target = 'HIDPlugin',
                ),
            xcodebuild_step(
                subdir = 'NE500',
                ),
            xcodebuild_step(
                subdir = 'SidewinderPlugAndPlayGamepadPlugin',
                target = 'MSSWGamepadPlugin',
                ),
            ]),

    ('build_dicarlolab_mwcore_plugins', [
            git_step('dicarlolab_mwcore_plugins'),
            xcodebuild_step(
                subdir = 'CircleStimulus',
                target = 'CircleStimulusPlugin',
                ),
            xcodebuild_step(
                subdir = 'FakeMonkeyPlugin',
                target = 'FakeMonkeyPlugin',
                ),
             xcodebuild_step(
                subdir = 'ITC18Plugin',
                target = 'ITC18Plugin',
                ),
             xcodebuild_step(
                subdir = 'MoviePlugin',
                target = 'MovieStimulusPlugin',
                ),
             xcodebuild_step(
                subdir = 'RectangleStimulus',
                target = 'RectangleStimulusPlugin',
                ),
            ]),

    ('build_mw_cocoa', [
            git_step('mw_cocoa'),
            xcodebuild_step(),
            ]),

    ('build_mw_client', [
            git_step('mw_client'),
            xcodebuild_step(),
            ]),

    ('build_mw_client_plugins', [
            git_step('mw_client_plugins'),
            xcodebuild_step(
                subdir = 'BehavioralWindow',
                ),
            xcodebuild_step(
                subdir = 'PythonBridgePlugin',
                ),
            xcodebuild_step(
                subdir = 'VariablesWindow',
                ),
             ]),

    ('build_dicarlolab_mwclient_plugins', [
            git_step('dicarlolab_mwclient_plugins'),
            xcodebuild_step(
                subdir = 'CalibratorWindow',
                target = 'CalibratorWindow',
                ),
            xcodebuild_step(
                subdir = 'EyeWindow',
                target = 'MWorksEyeWindow',
                ),
            xcodebuild_step(
                subdir = 'MATLABWindow',
                target = 'MWorksMATLABWindow',
                ),
            xcodebuild_step(
                subdir = 'RewardWindow',
                target = 'MWorksRewardWindow',
                ),
            ]),

    ('build_mw_editor', [
            git_step('mw_editor'),
            xcodebuild_step('MWEditor'),
            ]),

    ('build_mw_server', [
            git_step('mw_server'),
            xcodebuild_step(),
            ]),

    ('build_mw_datatools', [
            git_step('mw_datatools'),
            xcodebuild_step(
                subdir = 'DataFileIndexer',
                ),
            xcodebuild_step(
                subdir = 'DataFileReader',
                target = 'mwdfr',
                configuration = 'Debug',
                ),
            # MatlabDataReader depends on MWorksStreamUtilities, so we
            # need to build the latter first
            xcodebuild_step(
                subdir = 'MWorksStreamUtilities',
                target = 'libMWorksStreamUtilities',
                configuration = 'Debug',
                ),
            shell_step(
                subdir = 'MatlabDataReader',
                command = ['make', 'clean', 'install'],
                ),
            ]),

    ('build_mw_examples', [
            git_step('mw_examples'),
            xcodebuild_step('InstallTests', 'Release'),
            ]),

    ('build_installer', [
            git_step('dicarlolab_mwbuild'),
            shell_step(
                subdir = 'installer',
                command = ['./build_installer', installer_version],
                ),
            transfer.FileUpload(
                slavesrc = installer_slavesrc,
                masterdest = installer_masterdest,
                mode = 0644,
                ),
            ]),

    )


composite_build_steps = (

    ('build_all', [
            Trigger(
                schedulerNames = [component_info[0]],
                waitForFinish = True,
                updateSourceStamp = False,
                )
            for component_info in component_build_steps
            ]),

    )



################################################################################
#
# Builders and schedulers
#
################################################################################



c['builders'] = []
c['schedulers'] = [] 


for build_steps in (component_build_steps, composite_build_steps):
    for builder_name, factory_steps in build_steps:
        c['builders'].append(BuilderConfig(
                name = builder_name,
                slavename = default_slavename,
                factory = factory.BuildFactory(factory_steps),
                ))

        c['schedulers'].append(Triggerable(
                name = builder_name,
                builderNames = [builder_name],
                ))


c['schedulers'].append(Nightly(
            name = 'nightly_build_and_test',
            builderNames = ['build_all'],
            branch = None,
            hour = 0,
            ))
