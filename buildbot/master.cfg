# -*- python -*-
# ex: set syntax=python:

from buildbot.buildslave import BuildSlave
from buildbot.config import BuilderConfig
from buildbot.process import factory
from buildbot.scheduler import Nightly, Triggerable
from buildbot.status import html
from buildbot.steps import shell, source, transfer

import local_config as config



################################################################################
#
# General settings
#
################################################################################



c = BuildmasterConfig = {}

c['projectName'] = 'MWorks'
c['projectURL'] = config.project_url
c['buildbotURL'] = 'http://%s:%d/' % (config.buildbot_hostname,
                                      config.webstatus_port)

c['status'] = [html.WebStatus(http_port=config.webstatus_port, allowForce=True)]

installer_basename = 'MWorks'
installer_version = 'NIGHTLY'
installer_filename = installer_basename + '-' + installer_version + '.dmg'
installer_slavesrc = '/tmp/mw_installer/' + installer_filename
installer_masterdest = (config.installer_destination_path + '/' +
                        installer_file_name)



################################################################################
#
# Build slaves
#
################################################################################



macosx_10_5_x86_64 = 'MacOSX-10.5-x86_64'
macosx_10_6_x86_64 = 'MacOSX-10.6-x86_64'

slave_names = [macosx_10_5_x86_64, macosx_10_6_x86_64]
default_slavename = macosx_10_6_x86_64

c['slaves'] = [BuildSlave(name, config.slave_pass) for name in slave_names]
c['slavePortnum'] = config.slave_port



################################################################################
#
# Build steps
#
################################################################################



def git_step(reponame, mode='update'):
    repourl = '%s/%s.git' % (config.repository_base_url, reponame)
    return source.Git(repourl=repourl, mode=mode)


def shell_step(*args, **kwargs):
    return shell.ShellCommand(*args, **kwargs)


def xcodebuild_step(target = 'Everything',
                    configuration = 'Development (10.5 Compatible)'):

    return shell_step(
        command = [
            'xcodebuild',
            '-target', target,
            '-configuration', configuration,
            'clean',
            'build',
            ],
        description = 'building',
        descriptionDone = 'build',
        )


def make_step(target='all'):
    return shell_step(command = ['make', target])


component_build_steps = (

    ('clean_all', [
            shell_step(
                command = ['rm', '-Rf', path],
                )
            for path in (
                '/Applications/MWClient.app',
                '/Applications/MWEditor.app',
                '/Applications/MWServer.app',
                '/Documents/MonkeyWorks',
                '/Library/Application Support/MonkeyWorks',
                '/Library/Frameworks/MonkeyWorksCocoa.framework',
                '/Library/Frameworks/MonkeyWorksCore.framework',
                )
            ]),

    ('build_mw_supporting', [
            git_step('mw_supporting'),
            shell_step(
                command = ['git', 'submodule', 'update', '--init'],
                ),
            shell_step(
                command = ['python', 'fresh_build.py'],
                ),
            ]),

    ('build_mw_scarab', [
            git_step('mw_scarab'),
            xcodebuild_step('libscarab.a'),
            ]),

    ('build_mw_core', [
            git_step('mw_core'),
            xcodebuild_step(),
            ]),

    ('build_mw_core_plugins', [
            git_step('mw_core_plugins'),
            make_step(),
            ]),

    ('build_dicarlolab_mwcore_plugins', [
            git_step('dicarlolab_mwcore_plugins'),
            make_step(),
            ]),

    ('build_mw_cocoa', [
            git_step('mw_cocoa'),
            xcodebuild_step(),
            ]),

    ('build_mw_client', [
            git_step('mw_client'),
            xcodebuild_step(),
            ]),

    ('build_mw_client_plugins', [
            git_step('mw_client_plugins'),
            make_step(),
            ]),

    ('build_dicarlolab_mwclient_plugins', [
            git_step('dicarlolab_mwclient_plugins'),
            make_step(),
            ]),

    ('build_mw_editor', [
            git_step('mw_editor'),
            xcodebuild_step('MWEditor'),
            ]),

    ('build_mw_server', [
            git_step('mw_server'),
            xcodebuild_step(),
            ]),

    ('build_mw_datatools', [
            git_step('mw_datatools'),
            make_step(),
            ]),

    ('build_mw_examples', [
            git_step('mw_examples'),
            xcodebuild_step('InstallTests', 'Release'),
            ]),

    ('build_installer', [
            git_step('dicarlolab_mwbuild'),
            shell_step(
                command = ['./build_installer', installer_version],
                workdir = 'build/installer',
                ),
            transfer.FileUpload(
                slavesrc = installer_slavesrc,
                masterdest = installer_masterdest,
                mode = 0644,
                ),
            ]),

    )


composite_build_steps = (
    )



################################################################################
#
# Builders and schedulers
#
################################################################################



c['builders'] = []
c['schedulers'] = [] 

for build_steps in (component_build_steps, composite_build_steps):
    for builder_name, factory_steps in build_steps:
        c['builders'].append(BuilderConfig(
                name = builder_name,
                slavename = default_slavename,
                factory = factory.BuildFactory(factory_steps),
                ))

        c['schedulers'].append(Triggerable(
                name = builder_name,
                builderNames = [builder_name],
                ))
